Least_moves(y)
y <- sample(1:100,1)
sprintf('The least moves to %i is:',y)
Least_moves(y)
Print_values<- function(a,b,c){
if(a>b){
if(b>c){
print(c(a,b,c))
}else{
if(a>c){
print(c(a,c,b))
}else{
print(c(c,a,b))
}
}
}else{
if(b>c){
if(a>c){
print(c(b,a,c))
}else{
print(c(b,c,a))
}
}else{
print(c(c,b,a))
}
}
}
Print_values(runif(1,min = 0,max = 100),runif(1,min = 0,max = 100),runif(1,min = 0,max = 100))
M1 <- matrix(round(runif(50,0,50)), ncol = 10, nrow = 5)
M2 <- matrix(round(runif(50,0,50)), ncol = 5, nrow = 10)
Matrix_multip <- function(M1,M2){
M0 <- matrix(ncol = ncol(M2),nrow = nrow(M1))
for (a in 1:nrow(M1)){
j1 <- 0
j2 <- 0
j3 <- 0
j4 <- 0
j5 <- 0
for(b in 1:ncol(M1)){
R1 <- M1[a,b] * M2[b,1]
j1 <- j1 + R1
R2 <- M1[a,b] * M2[b,2]
j2 <- j2 + R2
R3 <- M1[a,b] * M2[b,3]
j3 <- j3 + R3
R4 <- M1[a,b] * M2[b,4]
j4 <- j4 + R4
R5 <- M1[a,b] * M2[b,5]
j5 <- j5 + R5
M0[a,] <- c(j1,j2,j3,j4,j5)
}
}
print(M0)
}
Matrix_multip(M1,M2)
M_test <- M1%*%M2
print(M_test)
Pascal_triangle <- function(k){
PT <- matrix(0,nrow = k,ncol = k)
PT[,1] <- 1
for(i in k){
PT[i,i] <- 1
}
for(i in 3:k){
for(j in 2:(k-1)){
PT[i,j] <- PT[i-1,j-1] + PT[i-1,j]
}
}
print('The line of Pascal triangle is:')
print(PT[k,])
}
Pascal_triangle(10)
Least_moves <- function(x){
i <- 0
while(x != 1){
if(odd(x)){
x <- x-1
i <- i+1
}else if(even(x)){
x <- x/2
i <- i+1
}
}
print(i)
}
y <- sample(1:100,1)
sprintf('The least moves to %i is:',y)
Least_moves(y)
library(gtools)
Least_moves <- function(x){
i <- 0
while(x != 1){
if(odd(x)){
x <- x-1
i <- i+1
}else if(even(x)){
x <- x/2
i <- i+1
}
}
print(i)
}
y <- sample(1:100,1)
sprintf('The least moves to %i is:',y)
Least_moves(y)
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
#6.2
#Import the date(perday)
Shenzhen_VIS_Day <- unique(Obs_Time)
#Numerical
Shenzhen_VIS_Day1 <- as.numeric(format(Shenzhen_VIS_Day, "%Y%m%d"))
#Create the list max values of VIS per day
SHenzhen_VIS_MaxPerDay <- list()
#the i in for() must be numerical, so I did a series of transformation of i. :)
for(i in Shenzhen_VIS_Day1){
SHenzhen_VIS_MaxPerDay <- c(SHenzhen_VIS_MaxPerDay , max(Shenzhen_VIS_value[which(Obs_Time == as.Date(as.character(i),"%Y%m%d"))],na.rm = T))
}
#plot the max value per day
dev.next()
plot(Shenzhen_VIS_Day, SHenzhen_VIS_MaxPerDay, lwd=1, type = "l", col="blue")
#Report the number of days with visibility by plot the histograms
Year <- as.numeric(substr(Shenzhen_VIS_Day,1,4))
dev.next()
par(mfrow=c(2,5),new = TRUE)
for(i in 2010:2020){
hist(as.numeric(SHenzhen_VIS_MaxPerDay[which(Year == i)]),breaks = c(0,5000,10000,15000,20000,25000,30000), right = FALSE, labels = TRUE,main = NA, xlab = "VIS Value",ylab = "Frequncy",ylim = c(0,350))
title("The VIS Histogram", sub = i)
}
#The visibility is getting better, except the 2020.
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
#6.2
#Import the date(perday)
Shenzhen_VIS_Day <- unique(Obs_Time)
#Numerical
Shenzhen_VIS_Day1 <- as.numeric(format(Shenzhen_VIS_Day, "%Y%m%d"))
#Create the list max values of VIS per day
SHenzhen_VIS_MaxPerDay <- list()
#the i in for() must be numerical, so I did a series of transformation of i. :)
for(i in Shenzhen_VIS_Day1){
SHenzhen_VIS_MaxPerDay <- c(SHenzhen_VIS_MaxPerDay , max(Shenzhen_VIS_value[which(Obs_Time == as.Date(as.character(i),"%Y%m%d"))],na.rm = T))
}
#plot the max value per day
dev.next()
plot(Shenzhen_VIS_Day, SHenzhen_VIS_MaxPerDay, lwd=1, type = "l", col="blue")
#Report the number of days with visibility by plot the histograms
Year <- as.numeric(substr(Shenzhen_VIS_Day,1,4))
dev.next()
par(mfrow=c(2,5),new = TRUE)
for(i in 2010:2020){
hist(as.numeric(SHenzhen_VIS_MaxPerDay[which(Year == i)]),breaks = c(0,5000,10000,15000,20000,25000,30000), right = FALSE, labels = TRUE,main = NA, xlab = "VIS Value",ylab = "Frequncy",ylim = c(0,350))
title("The VIS Histogram", sub = i)
}
#The visibility is getting better, except the 2020.
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
#6.2
#Import the date(perday)
Shenzhen_VIS_Day <- unique(Obs_Time)
#Numerical
Shenzhen_VIS_Day1 <- as.numeric(format(Shenzhen_VIS_Day, "%Y%m%d"))
#Create the list max values of VIS per day
SHenzhen_VIS_MaxPerDay <- list()
#the i in for() must be numerical, so I did a series of transformation of i. :)
for(i in Shenzhen_VIS_Day1){
SHenzhen_VIS_MaxPerDay <- c(SHenzhen_VIS_MaxPerDay , max(Shenzhen_VIS_value[which(Obs_Time == as.Date(as.character(i),"%Y%m%d"))],na.rm = T))
}
#plot the max value per day
dev.next()
plot(Shenzhen_VIS_Day, SHenzhen_VIS_MaxPerDay, lwd=1, type = "l", col="blue")
#Report the number of days with visibility by plot the histograms
Year <- as.numeric(substr(Shenzhen_VIS_Day,1,4))
dev.next()
par(mfrow=c(2,5),new = TRUE)
for(i in 2010:2020){
hist(as.numeric(SHenzhen_VIS_MaxPerDay[which(Year == i)]),breaks = c(0,5000,10000,15000,20000,25000,30000), right = FALSE, labels = TRUE,main = NA, xlab = "VIS Value",ylab = "Frequncy",ylim = c(0,350))
title("The VIS Histogram", sub = i)
}
#The visibility is getting better, except the 2020.
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
setwd('I:/ESE5023/ESE5023_Assignments')
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
#6.2
#Import the date(perday)
Shenzhen_VIS_Day <- unique(Obs_Time)
#Numerical
Shenzhen_VIS_Day1 <- as.numeric(format(Shenzhen_VIS_Day, "%Y%m%d"))
#Create the list max values of VIS per day
SHenzhen_VIS_MaxPerDay <- list()
#the i in for() must be numerical, so I did a series of transformation of i. :)
for(i in Shenzhen_VIS_Day1){
SHenzhen_VIS_MaxPerDay <- c(SHenzhen_VIS_MaxPerDay , max(Shenzhen_VIS_value[which(Obs_Time == as.Date(as.character(i),"%Y%m%d"))],na.rm = T))
}
#plot the max value per day
dev.next()
plot(Shenzhen_VIS_Day, SHenzhen_VIS_MaxPerDay, lwd=1, type = "l", col="blue")
#Report the number of days with visibility by plot the histograms
Year <- as.numeric(substr(Shenzhen_VIS_Day,1,4))
dev.next()
par(mfrow=c(2,5),new = TRUE)
for(i in 2010:2020){
hist(as.numeric(SHenzhen_VIS_MaxPerDay[which(Year == i)]),breaks = c(0,5000,10000,15000,20000,25000,30000), right = FALSE, labels = TRUE,main = NA, xlab = "VIS Value",ylab = "Frequncy",ylim = c(0,350))
title("The VIS Histogram", sub = i)
}
#The visibility is getting better, except the 2020.
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
Water_Data <- read.csv("marine_water_quality.csv")
#This file is from 蒋浩, who also use it for the assignment.
#In this problem, I want to analyze the turbidity (NTU) of this site
#7.1 Clean the data
Water_NTU <- Water_Data$Turbidity..NTU.
Water_NTU[which(Water_NTU == 'N/A')] <- NA
Water_NTU <- as.numeric(Water_NTU)
#7.2
Water_date <- as.Date(Water_Data$Dates)
plot(Water_date,Water_NTU,lwd=1, type = "l", col="blue")
#7.3
max(Water_NTU, na.rm = TRUE)
min(Water_NTU, na.rm = TRUE)
mean(Water_NTU, na.rm = TRUE)
var(Water_NTU, na.rm = TRUE)
quantile(Water_NTU, na.rm = TRUE)
source('C:/Users/ding9/OneDrive/桌面/assignment1/CaoXuDong/PS1_6.R')
View(Raw_Data)
View(SHenzhen_VIS_MaxPerDay)
Shenzhen_VIS_value[which(Shenzhen_VIS_value >160000)]
Shenzhen_VIS_value[which(Shenzhen_VIS_value >160000)]
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
#6.1
#Read the data
Raw_Data <- read.csv(file = "2281305.csv", header = T)
Shenzhen_VIS <- Raw_Data$VIS
#Clean the data
Shenzhen_VIS_value <- as.numeric(substr(Shenzhen_VIS,1,6))
Shenzhen_VIS_DQC <- substr(Shenzhen_VIS,8,8)
Shenzhen_VIS_VC <- substr(Shenzhen_VIS,10,10)
Shenzhen_VIS_QVC <- substr(Shenzhen_VIS,12,12)
Shenzhen_VIS2 <- Shenzhen_VIS
Shenzhen_VIS_value[which(Shenzhen_VIS_value == 999999)] <- NA
#According to the "user guide", when the date is not missing, meanwhile the DQC or QVC equals 9, the data is still useful.
#So I disable the following lines.
#Shenzhen_VIS_value[which(Shenzhen_VIS_DQC != '1')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_VC != 'N')] <- NA
#Shenzhen_VIS_value[which(Shenzhen_VIS_QVC != '1')] <- NA
#plot
Obs_Time <- as.Date(Raw_Data$DATE)
max(Shenzhen_VIS_value,na.rm = T)
plot(Obs_Time, Shenzhen_VIS_value, lwd=0.01, type = "l", col="blue")
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_1.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_1.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_1.R')
Print_values(1,2,3)
Print_values(3,2,1)
Print_values(1,3,2)
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_2.R')
m1
M1
M2
Matrix_multip(M1,M2)
M1%*%M2
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_3.R')
Pascal_triangle1(2)
Pascal_triangle1(3)
Pascal_triangle1(4)
Pascal_triangle1(5)
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_4.R')
Least_moves(10)
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_5.R')
Find_expression <- function(x){
a <-c(1,'',2,'',3,'',4,'',5,'',6,'',7,'',8,'',9)
b <- c('+','-','')
c <-permutations(3,8,b,set=TRUE, repeats.allowed=TRUE)
len_c <-length(c)/8
num <-0
for (i in 1:len_c) {
for (j in 1:8) {
a[2*j] <- c[i,j]
}
a1=paste(a,collapse = "")
value <- eval(parse(text=a1))
if(value == x){
val <-sprintf('=%d',x)
a2 <- c(a1,val)
a2 <- paste(a2, collapse = "")
print(a2)
num <- num+1
}
}
return(num)
}
Find_expression(10)
number1 <- Find_expression(10)
?permutations
library(gtools)
Find_expression <- function(x){
a <-c(1,'',2,'',3,'',4,'',5,'',6,'',7,'',8,'',9)
b <- c('+','-','')
c <-permutations(3,8,b,set=TRUE, repeats.allowed=TRUE)
len_c <-length(c)/8
num <-0
for (i in 1:len_c) {
for (j in 1:8) {
a[2*j] <- c[i,j]
}
a1=paste(a,collapse = "")
value <- eval(parse(text=a1))
if(value == x){
val <-sprintf('=%d',x)
a2 <- c(a1,val)
a2 <- paste(a2, collapse = "")
print(a2)
num <- num+1
}
}
return(num)
}
Find_expression(10)
Total_solutions <-c()
for(x in 1:100){
Total_solutions[x] <- Find_expression(x)
}
print(Total_solutions)
plot(c(1:100),Total_solutions,main='Find_expression(x)',type='h',xlab = 'number',ylab = 'quantity',col = 'blue')
max(Total_solutions)
num_max =which(Total_solutions == max(Total_solutions))
print(num_max)
min(Total_solutions)
num_min =which(Total_solutions == min(Total_solutions))
print(num_min)
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_6.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/HuangKai/assignment1/PS1_7.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_2.R')
M1%*%M2
Matrix_multip(M1,M2)
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_3.R')
Pascal_triangle(3)
Pascal_triangle(4)
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_6.R')
vis_max <- c()
for(iday in unique(time)){
Thisday<- which(time == iday)
Thisday_max <- max(vis2[Thisday], na.rm=T)
vis_max <- c(vis_max, Thisday_max)
}
Year <-substr(unique(time),1,4)
Year1<-as.numeric(Year)
Year2<-unique(Year1)
for (iyear in Year2){
Year_Vis <- vis_max[which(Year1==iyear)]
hist(Year_Vis,breaks=c(0,5000,10000,15000,20000,25000,30000))
}
vis_max <- c()
for(iday in unique(time)){
Thisday<- which(time == iday)
Thisday_max <- max(vis2[Thisday], na.rm=T)
vis_max <- c(vis_max, Thisday_max)
}
Year <-substr(unique(time),1,4)
Year1<-as.numeric(Year)
Year2<-unique(Year1)
for (iyear in Year2){
Year_Vis <- vis_max[which(Year1==iyear)]
hist(Year_Vis,breaks=c(0,5000,10000,15000,20000,25000,30000))
}
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_6.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_6.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_6.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_6.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_6.R')
Year``
Year1
Year2
source('C:/Users/ding9/OneDrive/桌面/assignment1/JiangHao/PS1_6.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/JinJingTao/Assignment1/PS1_1.R')
source('C:/Users/ding9/OneDrive/桌面/assignment1/JinJingTao/Assignment1/PS1_5.R')
a <- c(1,2,3,3)
which.max(a)
source('C:/Users/ding9/OneDrive/桌面/assignment1/JinJingTao/Assignment1/PS1_6.R')
